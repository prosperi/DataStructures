#BlueJ class context
comment0.params=n\ sym\ s\ dm\ ds\ be\ me\ le\ ie\ pm\ ps\ dr\ mr\ th
comment0.target=Animal(java.lang.String,\ java.lang.String,\ java.util.List,\ double,\ double,\ double,\ double,\ double,\ double,\ double,\ double,\ int,\ int,\ double)
comment1.params=
comment1.target=void\ activity()
comment1.text=\n\ @desc\ This\ method\ provides\ and\ easy\ way\ to\ enforce\ the\ order\ of\ behaviors\ the\ species\ can\ make\n\ Each\ behavior\ method\ returns\ true\ if\ it\ works,\ which\ in\ turn\ stops\ any\ further\ behaviors\ from\ happening\ that\ turn\n
comment10.params=x1\ y1
comment10.target=java.util.ArrayList\ drawPath(int,\ int)
comment10.text=\n\ @desc\ drawPath\ between\ animal\ and\ the\ cell,\ that\ creates\ a\ new\ Path\n\ @params\ int\ x1\ -\ x\ coordinate\ of\ that\ cell\n\ @params\ int\ y1\ -\ y\ coordinate\ of\ that\ cell\n\ @return\ boolean\ -\ true\ if\ the\ animal\ moves,\ false\ otherwise\n
comment11.params=path_01\ path_02\ i\ x0\ y0\ add\ plant\ world
comment11.target=void\ addToPath(Path,\ Path,\ int,\ int,\ int,\ boolean,\ boolean,\ World)
comment11.text=\n\ @desc\ helper\ method\ for\ drawPath()\ method\n\ this\ method\ assigns\ deadEnd\ value\ to\ path\ and\ adds\ \n\ new\ cells\ to\ Path\n\ @params\ Path\ path_01\ -\ whole\ path\n\ @params\ Path\ path_02\ -\ checked\ Path\n\ @params\ int\ i\ -\ dead\ End\ value\n\ @params\ int\ x0\ -\ X\ coordinate\ for\ new\ Cell\ in\ Path\n\ @params\ int\ y0\ -\ Y\ coordinate\ for\ new\ Cell\ in\ Path\n\ @params\ boolean\ add\ -\ if\ this\ is\ true\ the\ cell\ becomes\ part\ of\ the\ path\n\ @params\ boolean\ plant\ -\ if\ this\ is\ true\ the\ cell\ is\ stored\ as\ place\ where\ food\ can\ be\ found\n\ @params\ boolean\ World\ world\ -\ the\ world\n
comment12.params=k\ l
comment12.target=int\ checkPathCell(int,\ int)
comment12.text=\n\ @desc\ check\ the\ Path,\ and\ find\ if\ it\ ends\ already\n\ @params\ int\ k\ -\ X\ coordinate\ of\ the\ cell\n\ @params\ int\ l\ -\ Y\ coordinate\ of\ that\ cell\n\ @return\ int\ checkPathCell\ -\ 0,1,2,3\ or\ 4\ according\ to\ the\ specimen\ living\ in\ the\ cell\n
comment13.params=radar
comment13.target=void\ printRadar(java.util.TreeSet)
comment13.text=\n\ @desc\ used\ for\ test\ purposes,\ prints\ out\ the\ radar\n\ @params\ TreeSet<ArrayList<Path>>\ radar-\ radar\n
comment14.params=t
comment14.target=void\ setInfluenced(boolean)
comment14.text=\n\ @desc\ change\ influenced\ variable\ value\n\ @params\ boolean\n
comment15.params=
comment15.target=boolean\ getInfluenced()
comment15.text=\n\ @desc\ get\ Influenced\ variable\ value\n\ @return\ boolean\n
comment2.params=
comment2.target=boolean\ die()
comment2.text=\n\ @desc\ Checks\ if\ the\ species\ doesn't\ have\ enough\ energy\ or\ is\ too\ old\n\ The\ species\ is\ added\ to\ the\ list\ of\ deaths\ at\ the\ corresponding\ turn\ and\ species\ indices\n\ @return\ boolean\ -\ returns\ true\ if\ the\ animal\ dies,\ false\ otherwise\n
comment3.params=
comment3.target=boolean\ birth()
comment3.text=\n\ @desc\ Checks\ if\ the\ species\ has\ enough\ energy\ and\ room\ nearby\ to\ give\ birth\n\ The\ child\ is\ added\ to\ the\ list\ of\ births\ at\ the\ corresponding\ turn\ and\ species\ indices\n\ @return\ boolean\ -\ true\ if\ animal\ gives\ birth,\ false\ otherwise\n
comment4.params=
comment4.target=boolean\ eat()
comment5.params=
comment5.target=boolean\ eatAnimal()
comment5.text=\n\ @desc\ Looks\ at\ adjacent\ cells\ and\ checks\ if\ any\ animal\ it\ can\ eat\ is\ there\n\ If\ it\ finds\ a\ prey,\ it\ is\ removed\ from\ the\ board\ and\ added\ to\ the\ death\ list\n\ @return\ boolean\ -\ true\ if\ an\ acceptable\ animal\ is\ found\ and\ eaten,\ false\ otherwise\n
comment6.params=
comment6.target=boolean\ eatPlant()
comment6.text=\n\ Looks\ at\ current\ cell\ and\ checks\ if\ any\ plant\ it\ can\ eat\ is\ there\n\ @desc\ If\ it\ finds\ a\ prey,\ it\ is\ removed\ from\ the\ board\ and\ added\ to\ the\ death\ list\n\ @return\ boolean\ -\ true\ if\ an\ acceptable\ plant\ is\ found\ and\ eaten,\ false\ otherwise\n
comment7.params=
comment7.target=boolean\ move()
comment7.text=\n\ @desc\ this\ represents\ the\ movement\ algorithm\ for\ the\ animal\n\ at\ first\ checks\ if\ animal\ needs\ to\ find\ some\ food,\ if\ so\ than\n\ sorts\ possible\ cells\ according\ to\ the\ food\ place,\ if\ not\ moves\ randomly\n\ @return\ boolean\ -\ true\ if\ the\ animal\ moves,\ false\ otherwise\n
comment8.params=radar\ minI\ maxI\ minJ\ maxJ\ i\ j
comment8.target=void\ cellFinder(java.util.AbstractCollection,\ int,\ int,\ int,\ int,\ int,\ int)
comment8.text=\n\ @desc\ this\ method\ finds\ the\ farthest\ cells\ and\ builds\ \n\ path\ for\ them,\ than\ adds\ to\ radar\n\ @params\ AbstractCollection<ArrayList<Path>>\ radar\ -\ radar\n\ @params\ int\ minI\ -\ X\ coordinate\ of\ the\ farthest\ cell\ vertically(up)\n\ @params\ int\ maxI\ -\ X\ coordinate\ of\ the\ farthest\ cell\ vertically(bottom)\n\ @params\ int\ minJ\ -\ Y\ coordinate\ of\ the\ farthest\ cell\ vertically(left)\n\ @params\ int\ maxJ\ -\ Y\ coordinate\ of\ the\ farthest\ cell\ vertically(right)\n\ @params\ int\ minI\ -\ X\ coordinate\ of\ the\ current\ cell\n\ @params\ int\ maxI\ -\ Y\ coordinate\ of\ the\ current\ cell\n
comment9.params=tmp
comment9.target=void\ changeHome(Cell)
comment9.text=\n\ @desc\ this\ method\ changes\ the\ home\ of\ a\ cell\n\ @params\ Cell\ tmp\ -\ new\ home\ cell\n
numComments=16
