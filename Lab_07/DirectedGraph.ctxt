#BlueJ class context
comment0.params=
comment0.target=DirectedGraph()
comment1.params=k
comment1.target=boolean\ AddNode(java.lang.Comparable)
comment1.text=\n\ @desc\ AddNode\ method\ creates\ new\ node\ and\ adds\ it\ to\ \n\ map\ container.\ If\ node\ already\ exists\ then\ it\ is\ not\ added\n\ again.\n\ @param\ K\ k\ -\ value\ that\ should\ be\ a\ key\ for\ new\ node\n\ @return\ boolean\ -\ true\ if\ node\ was\ added\ succesfully,\ false\ if\ not\n
comment2.params=k1\ k2\ w
comment2.target=boolean\ AddEdge(java.lang.Comparable,\ java.lang.Comparable,\ int)
comment2.text=\n\ @desc\ AddEdge\ method\ creates\ a\ new\ edge\ and\ adds\ this\ edge\ to\n\ the\ outgoing\ edges'\ container\ of\ k1\ parameter,\ and\ to\ the\ incoming\ \n\ edge's\ container\ of\ k2\ parameter\n\ @param\ K\ k1\ -\ starting\ point\ of\ the\ edge\n\ @param\ K\ k2\ -\ ending\ point\ of\ the\ edge\n\ @return\ boolean\ -\ true\ if\ edge\ was\ added\ successfully\n
comment3.params=
comment3.target=void\ clearAll()
comment3.text=\n\ @desc\ Clear\ All\ method\ returns\ each\ node\ to\ initial\ state\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\n\ @desc\ toString\ methid\ returns\ string\ representation\ of\ the\ graph\n\ @return\ String\ str\ -\ string\ representation\ of\ the\ graph\n
comment5.params=k0\ k1
comment5.target=java.util.ArrayList\ findShortestPath(java.lang.Comparable,\ java.lang.Comparable)
comment5.text=\n\ @desc\ findShortestPath\ method\ calles\ dijkstra()\n\ to\ calculate\ the\ shortest\ path\ between\ two\ points\n\ @param\ K\ k0\ -\ starting\ point\ of\ the\ path\n\ @param\ K\ k1\ -\ ending\ point\ of\ the\ path\n\ @return\ ArrayList<DirectedGraphNode>\ path\ -\ shortest\ path\ between\ these\ two\ nodes\n
comment6.params=k0\ k1
comment6.target=java.util.PriorityQueue\ dijkstra(java.lang.Comparable,\ java.lang.Comparable)
comment6.text=\n\ @desc\ this\ method\ tries\ to\ find\ shortest\ path\ between\ two\ points\ using\ dijkstra's\n\ algorithm.\ \n\ @param\ K\ k0\ -\ starting\ point\ of\ the\ path\n\ @param\ K\ k1\ -\ ending\ point\ of\ the\ path\n\ @return\ PriorityQueue<Path>\ pq\ -\ queue\ of\ the\ paths\n
comment7.params=
comment7.target=java.lang.String\ getShortestPath()
comment7.text=\n\ @desc\ get\ String\ representation\ of\ shortest\ path\n\ @return\ String\ shortestPath\ -\ shortest\ path\ between\ two\ nodes\n
comment8.params=
comment8.target=java.util.Map\ getMap()
comment8.text=\n\ @desc\ getter\ for\ map\ container\n\ @return\ Map<K,\ DirectedGraphNode<K,\ E>>\ map\n
comment9.params=dest\ cost
comment9.target=DirectedGraph.Path\ createPath(DirectedGraph.DirectedGraphNode,\ int)
comment9.text=\n\ @desc\ create\ an\ instance\ of\ Path\ class\n\ @return\ Path\ path\ -\ instance\ of\ Path\ class\n
numComments=10
